#pragma once
<%- renderTemplate('templates/doc.ejs') %>
#include "hyperloop.h"
<%- renderTemplate('templates/includes_and_usings.ejs') %>

ref class <%=className%><% if (extendsType) { %> : <%= extendsType.fullInstanceName %><% } %>
{
public:
	virtual ~<%=className%>();
<% methods.forEach(function(o){ -%>
	virtual <%- o.selector %><%- o.override ? ' override' : '' %>;
<% }) -%>

internal:
	property JSObjectRef thisObject;
	property JSObjectRef superObject;
	property JSObjectRef selfObject;
	property JSGlobalContextRef ctx;
	property JSObjectRef source;
	property bool isSuperClass;
	property bool isInit;
	void _cleanup();
	void _initWithFunctionAndContext(JSObjectRef src, JSGlobalContextRef context);
};

// export typdefs we use
<% typedefs.forEach(function(t) { -%>
<%- t %>
<% }) -%>

JSObjectRef AttachPrototypeFor<%-className%>(JSContextRef ctx, JSObjectRef function, JSObjectRef result);
JSClassRef CreateClassFor<%=className%>();
JSClassRef CreateClassFor<%=className%>Constructor();
JSObjectRef MakeObjectFor<%=className%>Constructor(JSContextRef, JSObjectRef);
JSValueRef MakeObjectFor<%-className%>ConstructorCallback (JSContextRef ctx, JSObjectRef function, JSObjectRef object, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception);

typedef struct <%=className%>Private {
	JSGlobalContextRef context;
	JSObjectRef callback;
} <%=className%>Private;

JSValueRef Hyperloop<%-className%>ToJSValueRef (JSContextRef ctx, <%-instanceName%>^ instance);
<%-instanceName%>^ HyperloopJSValueRefTo<%-className%> (JSContextRef ctx, JSValueRef value, JSValueRef *exception, bool *cleanup);
<% Object.keys(class_methods).sort().forEach(function(m) { -%>
JSValueRef <%=m%>For<%-className%>Constructor(JSContextRef ctx, JSObjectRef function, JSObjectRef object, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception);
<% }); -%>
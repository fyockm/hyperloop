<%- renderTemplate('templates/doc.ejs') %>
#include "<%- object.mangledName %>.h"<% if (object.is_imported_class) { %>
#include "../<%- object.name %>.h"
using namespace Platform;<% } %>
<% var privateObjectAs = use_pointer ? 'Pointer' : 'ID',
		useClassName = object.is_imported_class ? object.name : fullInstanceName; %>

JSClassDefinition ClassDefinitionFor<%-name%>;
JSClassDefinition ClassDefinitionFor<%-name%>Constructor;
JSClassRef <%-name%>ClassDef;
JSClassRef <%-name%>ClassDefForConstructor;

<% function getVarAssignment() {
// TODO: Do we really need to specially handle "Window" like this?
 if (object.simpleType === 'Window') { %>
	<%- typeToUse %> <%=varname%> = Window::Current;
<% } else { %>
	<%- typeToUse %> <%=varname%> = (<%- typeToUse %>)HyperloopJSValueRefTo<%- name %>(ctx, object, exception, 0);
<% }
} %>

<% Object.keys(readonly_properties).sort().forEach(function(p) {
	var propobj = object.properties[p]
		code = makeGetProperty(state, object, propobj, p, 'result', varname);
-%>
JSValueRef Get<%=: p | capitalize %>For<%-name%> (JSContextRef ctx, JSObjectRef object, JSStringRef propertyName, JSValueRef* exception)
{
	<% getVarAssignment() %>
	<%-indentify(code,'	')%>
}
<% }) -%>

<% Object.keys(readwrite_properties).sort().forEach(function(p) {
	var propobj = object.properties[p],
		get_code = makeGetProperty(state, object, propobj, p, 'result', varname),
		set_code = makeSetProperty(state, object, propobj, p, varname, 'argumentCount');
-%>
/**
 * <%-name%>.<%=p%>;
 */
JSValueRef Get<%=: p | capitalize %>For<%-name%> (JSContextRef ctx, JSObjectRef object, JSStringRef propertyName, JSValueRef* exception)
{
	<% getVarAssignment() %>
	<%-indentify(get_code,'	')%>
}

/**
 * <%-name%>.<%=p%> = value;
 */
bool Set<%=: p | capitalize %>For<%-name%> (JSContextRef ctx, JSObjectRef object, JSStringRef propertyName, JSValueRef value, JSValueRef* exception)
{
	<% getVarAssignment() %>
	<%-indentify(set_code,'	')%>
	return true;
}

<% }) -%>

<% Object.keys(instance_methods).sort().forEach(function(m) {
	var ma = instance_methods[m],
		code = makeMethod(state, object, ma, 'result', varname, 'arguments', 'argumentCount');
-%>
/**
 * <%-name%>.<%=ma[0].name%>();
 */
JSValueRef <%=m%>For<%-name%> (JSContextRef ctx, JSObjectRef function, JSObjectRef object, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
{
	<% getVarAssignment() %>
	<%-indentify(code,'	')%>
}

<% });-%>

/**
 * generic conversion from native object representation to JS string
 */
JSValueRef toStringFor<%-name%> (JSContextRef ctx, JSObjectRef function, JSObjectRef object, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
{
	String^ <%=varname%> = "<%-useClassName%>";
	return hyperloop::getJSValueRef(ctx, <%=varname%>);
}

static JSStaticValue StaticValueArrayFor<%-name%> [] = {
<% Object.keys(instance_readonly_properties).sort().forEach(function(p) { -%>
	{ "<%=p%>", Get<%=: p | capitalize %>For<%-name%>, 0, kJSPropertyAttributeReadOnly },
<% }) -%>
<% Object.keys(instance_readwrite_properties).sort().forEach(function(p) { -%>
	{ "<%=p%>", Get<%=: p | capitalize %>For<%-name%>, Set<%=: p | capitalize %>For<%-name%>, kJSPropertyAttributeNone },
<% }) -%>
	{ 0, 0, 0, 0 }
};

static JSStaticFunction StaticFunctionArrayFor<%-name%> [] = {
<% Object.keys(instance_methods).sort().forEach(function(m) {  -%>
	{ "<%=m%>", <%=m%>For<%-name%>, kJSPropertyAttributeNone },
<% }) -%>
	{ "toString", toStringFor<%-name%>, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontEnum | kJSPropertyAttributeDontDelete },
	{ 0, 0, 0 }
};

JSObjectRef <%-name%>MakeInstance (JSContextRef ctx, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
{<% if (no_constructor) {%>
	throw ref new Exception(0, "<%= useClassName %> has no public constructor!");
<% } else { %>
<% if (name in { 'Application': 1, 'Window': 1 }) { /* TODO: If "::Current" exists, use this block */ %>
	<%- name %><%= use_pointer ? '*' : '^' %> instance = <%-name%>::Current;
<% } else { -%>
	bool handled = false;
	<%- useClassName %> <%= use_pointer ? '*' : '^' %>instance<%= use_pointer ? ' = nullptr' : '' %>;
<%
if (state.handlerBindings[name]) {
	state.handlerBindings[name].forEach(function(binding, i) { %>
	<%- indentify(renderTemplate('templates/class_delegate_constructor.ejs', { binding: binding, index: i }), '	') %>
<% })
} else { constructors.forEach(function(c, i) { %>
	<%- indentify(renderTemplate('templates/class_constructor.ejs', { index: i, constructor: c }), '	') %>
<% });
} -%>
	if (<%= use_pointer ? 'instance == nullptr' : '!handled' %>) {
		throw ref new Exception(0, "<%= useClassName %> has no matching constructor!");
	}
<% } %>
	JSObjectRef object = MakeObjectFor<%-name%>(ctx, instance);
	return object;
<% } -%>
}

/**
 * called to make an instance of the <%-name%> class using the proper
 * constructor and prototype chain.  this is called when you call
 * new <%-useClassName%>()
 */
JSObjectRef MakeInstanceFor<%-name%> (JSContextRef ctx, JSObjectRef constructor, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
{
	return <%-name%>MakeInstance(ctx, argumentCount, arguments, exception);
}

/**
 * called to make an instance of the <%-name%> class using the proper
 * constructor and prototype chain. this is called when you call
 * <%-useClassName%>()
 */
JSValueRef MakeInstanceFromFunctionFor<%-name%> (JSContextRef ctx, JSObjectRef function, JSObjectRef thisObject, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
{
	return <%-name%>MakeInstance(ctx,argumentCount,arguments,exception);
}

/**
 * called when a new JS object is created for this class
 */
void InitializerFor<%-name%> (JSContextRef ctx, JSObjectRef object)
{
	JSPrivateObject *po = (JSPrivateObject *)JSObjectGetPrivate(object);
}

/**
 * called when the JS object is ready to be garbage collected
 */
void FinalizerFor<%-name%> (JSObjectRef object)
{
	HyperloopDestroyPrivateObject(object);
}

/**
 * type conversion from native type to JS type
 */
JSValueRef JSTypeConvertorFor<%-name%>(JSContextRef ctx, JSObjectRef object, JSType type, JSValueRef* exception)
{
	<% getVarAssignment() %>
	if (type == kJSTypeString)
	{
		return toStringFor<%-name%>(ctx,NULL,object,0,NULL,exception);
	}
	return NULL;
}

/**
 * called to determine if an object is of a subclass
 */
bool IsInstanceFor<%-name%> (JSContextRef ctx, JSObjectRef constructor, JSValueRef possibleInstance, JSValueRef* exception)
{
	return false;
}

<% Object.keys(class_methods).sort().forEach(function(m) {
	var methods = class_methods[m],
		code = makeMethod(state, object, methods, 'result', name, 'arguments', 'argumentCount');
-%>
/**
 * <%-name%>.<%=m%>();
 */
JSValueRef <%=m.split('.').join('_')%>For<%-name%>Constructor (JSContextRef ctx, JSObjectRef function, JSObjectRef object, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
{
	<% getVarAssignment() %>
	<%-indentify(code,'	')%>
}

<% });-%>

static JSStaticValue StaticValueArrayFor<%-name%>Constructor [] = {
<% Object.keys(class_readonly_properties).sort().forEach(function(p) { -%>
	{ "<%=p%>", Get<%=: p | capitalize %>For<%-name%>, 0, kJSPropertyAttributeReadOnly },
<% }) -%>
<% Object.keys(class_readwrite_properties).sort().forEach(function(p) { -%>
	{ "<%=p%>", Get<%=: p | capitalize %>For<%-name%>, Set<%=: p | capitalize %>For<%-name%>, kJSPropertyAttributeNone },
<% }) -%>
	{ 0, 0, 0, 0 }
};

static JSStaticFunction StaticFunctionArrayFor<%-name%>Constructor [] = {
<% Object.keys(class_methods).sort().forEach(function(m) {  -%>
	{ "<%=m%>", <%=m.split('.').join('_')%>For<%-name%>Constructor, kJSPropertyAttributeNone },
<% }) -%>
	{ 0, 0, 0 }
};

/**
 * called to get the JSClassRef for <%-name%> constructor class
 */
JSClassRef CreateClassFor<%-name%>Constructor ()
{
	static bool init;
	if (!init)
	{
		init = true;

		ClassDefinitionFor<%-name%>Constructor = kJSClassDefinitionEmpty;
		ClassDefinitionFor<%-name%>Constructor.staticValues = StaticValueArrayFor<%-name%>Constructor;
		ClassDefinitionFor<%-name%>Constructor.className = "<%-name%>Constructor";
		ClassDefinitionFor<%-name%>Constructor.callAsConstructor = MakeInstanceFor<%-name%>;
		ClassDefinitionFor<%-name%>Constructor.callAsFunction = MakeInstanceFromFunctionFor<%-name%>;
		ClassDefinitionFor<%-name%>Constructor.staticFunctions = StaticFunctionArrayFor<%-name%>Constructor;

	<% if (entry.superClass) { -%>
	ClassDefinitionFor<%-name%>Constructor.parentClass = CreateClassFor<%=entry.superClass%>Constructor();
	<% } -%>
	<%-name%>ClassDefForConstructor = JSClassCreate(&ClassDefinitionFor<%-name%>Constructor);

		JSClassRetain(<%-name%>ClassDefForConstructor);
	}
	return <%-name%>ClassDefForConstructor;
}

/**
 * called to get the JSClassRef for <%-name%> class
 */
JSClassRef CreateClassFor<%-name%> ()
{
	static bool init;
	if (!init)
	{
		init = true;

		ClassDefinitionFor<%-name%> = kJSClassDefinitionEmpty;
		ClassDefinitionFor<%-name%>.staticValues = StaticValueArrayFor<%-name%>;
		ClassDefinitionFor<%-name%>.staticFunctions = StaticFunctionArrayFor<%-name%>;
		ClassDefinitionFor<%-name%>.initialize = InitializerFor<%-name%>;
		ClassDefinitionFor<%-name%>.finalize = FinalizerFor<%-name%>;
		ClassDefinitionFor<%-name%>.convertToType = JSTypeConvertorFor<%-name%>;
		ClassDefinitionFor<%-name%>.className = "<%-name%>";
		ClassDefinitionFor<%-name%>.hasInstance = IsInstanceFor<%-name%>;

	<% if (entry.superClass) { -%>
	ClassDefinitionFor<%-name%>.parentClass = CreateClassFor<%=entry.superClass%>();
	<% } -%>
	<%-name%>ClassDef = JSClassCreate(&ClassDefinitionFor<%-name%>);

		JSClassRetain(<%-name%>ClassDef);
	}
	return <%-name%>ClassDef;
}

/**
 * called to make a native object for <%-name%>. this method must be called instead of
 * normal JSObjectMake in JavaScriptCore so that the correct prototype chain and
 * constructor will be setup.
 */
JSObjectRef MakeObjectFor<%-name%> (JSContextRef ctx, <%- is_imported_class ? 'void *' : typeToUse %> instance)
{
	JSPrivateObject* poc = new JSPrivateObject();
	poc-><%= use_pointer ? 'buffer' : 'object' %> = instance;
	poc->type = <%= use_pointer ? 'JSPrivateObjectTypePointer' : 'JSPrivateObjectTypeID' %>;
	JSObjectRef object = JSObjectMake(ctx, CreateClassFor<%-name%>(), poc);
	JSObjectRef value = JSObjectMake(ctx, CreateClassFor<%-name%>Constructor(), 0);

	JSStringRef cproperty = JSStringCreateWithUTF8CString("constructor");
	JSObjectSetProperty(ctx, object, cproperty, value, kJSPropertyAttributeDontEnum, 0);
	JSStringRelease(cproperty);

	JSStringRef nameProperty = JSStringCreateWithUTF8CString("name");
	JSStringRef valueProperty = JSStringCreateWithUTF8CString("<%-name%>");
	JSValueRef valueRef = JSValueMakeString(ctx, valueProperty);
	JSObjectSetProperty(ctx, value, nameProperty, valueRef, kJSPropertyAttributeDontEnum, 0);
	JSStringRelease(nameProperty);
	JSStringRelease(valueProperty);

	return object;
}

/**
 * called to make a native object for <%-name%>. this method must be called instead of
 * normal JSObjectMake in JavaScriptCore so that the correct prototype chain and
 * constructor will be setup.
 */
JSObjectRef MakeObjectFor<%-name%>Constructor (JSContextRef ctx)
{
	JSClassRef classRef = CreateClassFor<%-name%>Constructor();
	JSObjectRef object = JSObjectMake(ctx, classRef, 0);

	JSStringRef nameProperty = JSStringCreateWithUTF8CString("name");
	JSStringRef valueProperty = JSStringCreateWithUTF8CString("<%-name%>");
	JSValueRef valueRef = JSValueMakeString(ctx, valueProperty);
	JSObjectSetProperty(ctx, object, nameProperty, valueRef, kJSPropertyAttributeDontEnum, 0);
	JSStringRelease(nameProperty);
	JSStringRelease(valueProperty);

	JSObjectRef plainObject = JSObjectMake(ctx,0,0);
	JSStringRef prototypeProperty = JSStringCreateWithUTF8CString("prototype");
	JSObjectSetProperty(ctx, object, prototypeProperty, plainObject, kJSPropertyAttributeDontEnum, 0);
	JSStringRelease(prototypeProperty);

	JSStringRef cproperty = JSStringCreateWithUTF8CString("constructor");
	JSObjectSetProperty(ctx, plainObject, cproperty, object, kJSPropertyAttributeDontEnum, 0);
	JSStringRelease(cproperty);

	return object;
}

/**
 * return a wrapped JS object instance
 */
JSValueRef Hyperloop<%-name%>ToJSValueRef (JSContextRef ctx, <%- is_imported_class ? 'void *' : typeToUse %> instance)
{
	return MakeObjectFor<%-name%>(ctx, instance);
}

/**
 * return an unwrapped JS object as a native instance
 */
<%- is_imported_class ? 'void *' : typeToUse %> HyperloopJSValueRefTo<%-name%> (JSContextRef ctx, JSValueRef value, JSValueRef *exception, bool *cleanup)
{
	if (JSValueIsObject(ctx,value))
	{
		JSObjectRef object = JSValueToObject(ctx,value,exception);
		<%- typeToUse %> <%=varname%> = (<%- typeToUse %>)HyperloopGetPrivateObjectAs<%- privateObjectAs %>(object);
		return <%=varname%>;
	}
<% if (name==='String') { -%>
	else {
		return (<%-fullInstanceName%>)HyperloopToString(ctx, value);
	}
<% } else { -%>
	else
	{
		return nullptr;
	}
<% } -%>

}

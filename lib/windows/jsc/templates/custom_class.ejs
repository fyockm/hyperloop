<%- renderTemplate('templates/doc.ejs') %>
#include "<%=className%>.h"
using namespace Platform::Details;

<% function getVarAssignment() { %>
	<%- instanceName %> ^<%=varname%> = HyperloopJSValueRefTo<%- name %>(ctx, object, exception, 0);
<% } %>

JSClassDefinition ClassDefinitionFor<%=className%>Constructor;
JSClassDefinition ClassDefinitionFor<%=className%>;
JSClassRef <%=className%>ClassDefForConstructor;
JSClassRef <%=className%>ClassDef;

void <%=className%>::_initWithFunctionAndContext(JSObjectRef src, JSGlobalContextRef context)
{
	ctx = HyperloopGetGlobalContext(context);
	source = src;
	JSValueProtect(ctx, source);
	JSGlobalContextRetain(ctx);
	thisObject = (JSObjectRef)Hyperloop<%=className%>ToJSValueRef(ctx, this);
	JSValueProtect(ctx, thisObject);
	isInit = true;
}

void <%=className%>::_cleanup()
{
	if (thisObject != nullptr) {
		JSValueUnprotect(ctx, thisObject);
		thisObject = nullptr;
	}
	selfObject = nullptr;
	if (source != nullptr)
	{
		JSValueUnprotect(ctx, source);
		source = nullptr;
	}
	if (ctx != nullptr)
	{
		JSGlobalContextRelease(ctx);
		ctx = nullptr;
	}
}

<%=className%>::~<%=className%>()
{
	this->_cleanup();
}

<% methods.forEach(function(o){ -%>
<%-o.selector.replace(' ', ' ' + className + '::')%>
{
	<%-indentify(o.code,'	') %>
}

<% }) -%>

<% Object.keys(class_methods).sort().forEach(function(m) {
	var code = class_methods[m];
-%>
/**
 * [<%-className%> <%=m%>]
 */
JSValueRef <%=m%>For<%-className%>Constructor (JSContextRef ctx, JSObjectRef function, JSObjectRef object, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
{
	<%=className%>Private *_private = (<%=className%>Private *)JSObjectGetPrivate(object);
	<% getVarAssignment() %>
	<%-indentify(code,'	')%>
}

<% });-%>

static JSStaticFunction StaticFunctionArrayFor<%-className%>Constructor [] = {
<% Object.keys(class_methods).sort().forEach(function(m) {  -%>
	{ "<%=m%>", <%=m%>For<%-className%>Constructor, kJSPropertyAttributeNone },
<% }) -%>
	{ 0, 0, 0 }
};

/**
 * called to make a native object for <%-className%>. this method must be called instead of
 * normal JSObjectMake in JavaScriptCore so that the correct prototype chain and
 * constructor will be setup.
 */
JSObjectRef MakeObjectFor<%-className%> (JSContextRef ctx, <%-className%>^ instance)
{
	if (instance->thisObject != nullptr) {
		return instance->thisObject;
	}
	JSPrivateObject* poc = new JSPrivateObject();
	poc->object = instance;
	poc->type = JSPrivateObjectTypeID;
	JSObjectRef object = JSObjectMake(ctx, CreateClassFor<%-className%>(), poc);
	JSObjectRef value = JSObjectMake(ctx, CreateClassFor<%-className%>Constructor(), 0);

	JSStringRef cproperty = JSStringCreateWithUTF8CString("constructor");
	JSObjectSetProperty(ctx, object, cproperty, value, kJSPropertyAttributeDontEnum, 0);
	JSStringRelease(cproperty);

	JSStringRef nameProperty = JSStringCreateWithUTF8CString("name");
	JSStringRef valueProperty = JSStringCreateWithUTF8CString("<%-className%>");
	JSValueRef valueRef = JSValueMakeString(ctx, valueProperty);
	JSObjectSetProperty(ctx, value, nameProperty, valueRef, kJSPropertyAttributeDontEnum, 0);
	JSStringRelease(nameProperty);
	JSStringRelease(valueProperty);

	return object;
}

JSObjectRef <%-className%>MakeInstance (JSContextRef ctx, JSObjectRef constructor, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
{
	<%-className%>Private *_private = (<%-className%>Private*)JSObjectGetPrivate(constructor);
	if (_private==nullptr)
	{
		OutputDebugStringA("[ERROR] MakeInstanceFromFunctionFor<%-className%> invoked with no private object\n");
		return nullptr;
	}
	<%-className%>^ instance = ref new <%-className%>();
	instance->_initWithFunctionAndContext(_private->callback, _private->context);
	JSObjectRef object = MakeObjectFor<%-className%>(ctx, instance);
	return AttachPrototypeFor<%-className%>(ctx, constructor, object);
}

/**
 * called to make an instance of the <%-className%> class using the proper
 * constructor and prototype chain.  this is called when you call
 * new <%-className%>()
 */
JSObjectRef MakeInstanceFor<%-className%> (JSContextRef ctx, JSObjectRef constructor, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
{
	return <%-className%>MakeInstance(ctx,constructor,argumentCount,arguments,exception);
}

/**
 * called to make an instance of the <%-className%> class using the proper
 * constructor and prototype chain. this is called when you call
 * <%-className%>()
 */
JSValueRef MakeInstanceFromFunctionFor<%-className%> (JSContextRef ctx, JSObjectRef function, JSObjectRef thisObject, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
{
	<%-className%>Private *_private = (<%-className%>Private*)JSObjectGetPrivate(function);
	if (_private==nullptr)
	{
		OutputDebugStringA("[ERROR] MakeInstanceFromFunctionFor<%-className%> invoked with no private object\n");
		return JSValueMakeUndefined(ctx);
	}
	<%-className%>^ instance = ref new <%-className%>();
	instance->_initWithFunctionAndContext(_private->callback, _private->context);
	JSObjectRef result = MakeObjectFor<%-className%>(ctx,instance);

	return AttachPrototypeFor<%-className%>(ctx, function, result);
}

/**
 * copy any properties (excluding our constructor) that are attached to the prototype
 * of the constructor such that instances will also inherit these properties
 */
JSObjectRef AttachPrototypeFor<%-className%>(JSContextRef ctx, JSObjectRef function, JSObjectRef result)
{
	JSStringRef prototypeString = JSStringCreateWithUTF8CString("prototype");
	JSValueRef prototypeValue = JSObjectGetProperty(ctx,function,prototypeString,0);
	JSStringRelease(prototypeString);
	JSObjectRef prototype = JSValueToObject(ctx,prototypeValue,0);
	JSPropertyNameArrayRef properties = JSObjectCopyPropertyNames(ctx,prototype);
	size_t count = JSPropertyNameArrayGetCount(properties);
	for (size_t c = 0; c < count; c++)
	{
		JSStringRef propertyName = JSPropertyNameArrayGetNameAtIndex(properties,c);
		if (!JSStringIsEqualToUTF8CString(propertyName,"constructor"))
		{
			JSValueRef value = JSObjectGetProperty(ctx,prototype,propertyName,0);
			JSObjectSetProperty(ctx,result,propertyName,value,0,0);
		}
	}
	JSPropertyNameArrayRelease(properties);

	return result;
}

/**
 * generic conversion from native object representation to JS string
 */
JSValueRef toStringFor<%-className%> (JSContextRef ctx, JSObjectRef function, JSObjectRef object, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
{
	<%-className%>^ <%=:className | downcase%> = (<%-className%>^)HyperloopGetPrivateObjectAsID(object);
	return HyperloopToString(ctx, <%=:className | downcase%>);
}

/**
 * called when the JS object is ready to be garbage collected
 */
void FinalizerFor<%-className%>Constructor (JSObjectRef object)
{
	<%-className%>Private *_private = (<%-className%>Private*)JSObjectGetPrivate(object);
	if (_private != nullptr)
	{
		JSValueUnprotect(_private->context, _private->callback);
		JSGlobalContextRelease(_private->context);
		_private->context = NULL;
		_private->callback = NULL;
		free(_private);
		_private = nullptr;
	}
}

/**
 * called when the JS object is ready to be garbage collected
 */
void FinalizerFor<%-className%> (JSObjectRef object)
{
	HyperloopDestroyPrivateObject(object);
}

/**
 * type conversion from native type to JS type
 */
JSValueRef JSTypeConvertorFor<%-className%>(JSContextRef ctx, JSObjectRef object, JSType type, JSValueRef* exception)
{
	return NULL;
}

/**
 * called to determine if an object is of a subclass
 */
bool IsInstanceFor<%-className%> (JSContextRef ctx, JSObjectRef constructor, JSValueRef possibleInstance, JSValueRef* exception)
{
	if (HyperloopPrivateObjectIsType(constructor,JSPrivateObjectTypeID) &&
		HyperloopPrivateObjectIsType((JSObjectRef)possibleInstance,JSPrivateObjectTypeID))
	{
		auto constructorObj = HyperloopGetPrivateObjectAsID(constructor);
		auto possibleSubclassObj = HyperloopGetPrivateObjectAsID((JSObjectRef)possibleInstance);
		return possibleSubclassObj->GetType()->Equals(constructorObj->GetType());
	}
	return false;
}


<% Object.keys(instance_methods).sort().forEach(function(m) {
	var ma = instance_methods[m],
		code = makeMethod(state, object, m, 'result', varname, 'arguments', 'argumentCount', null, true);
-%>
/**
 * [<%-className%> <%=ma[0].selector%>]
 */
JSValueRef <%=m%>For<%-className%> (JSContextRef ctx, JSObjectRef function, JSObjectRef object, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
{
	<%-instanceName%>^ <%=varname%> = (<%-instanceName%>^)HyperloopGetPrivateObjectAsID(object);
	<%-indentify(code,'	')%>
}

<% });-%>

static JSStaticFunction StaticFunctionArrayFor<%-className%> [] = {
<% Object.keys(instance_methods).sort().forEach(function(m) {  -%>
	{ "<%=m%>", <%=m%>For<%-className%>, kJSPropertyAttributeNone },
<% }) -%>
	{ "toString", toStringFor<%-className%>, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontEnum | kJSPropertyAttributeDontDelete },
	{ 0, 0, 0 }
};


/**
 * called to get the JSClassRef for <%-className%> class
 */
JSClassRef CreateClassFor<%-className%> ()
{
	static bool init;
	if (!init)
	{
		init = true;

		ClassDefinitionFor<%-className%> = kJSClassDefinitionEmpty;
		ClassDefinitionFor<%-className%>.staticFunctions = StaticFunctionArrayFor<%-className%>;
		ClassDefinitionFor<%-className%>.finalize = FinalizerFor<%-className%>;
		ClassDefinitionFor<%-className%>.convertToType = JSTypeConvertorFor<%-className%>;
		ClassDefinitionFor<%-className%>.className = "<%-className%>";
		ClassDefinitionFor<%-className%>.hasInstance = IsInstanceFor<%-className%>;
<% if (extendsType) { %>
		ClassDefinitionFor<%-className%>.parentClass = CreateClassFor<%=extendsType.type%>();
<% } %>
		<%-className%>ClassDef = JSClassCreate(&ClassDefinitionFor<%-className%>);
		JSClassRetain(<%-className%>ClassDef);
	}
	return <%-className%>ClassDef;
}

/**
 * called to get the JSClassRef for <%-className%> constructor class
 */
JSClassRef CreateClassFor<%-className%>Constructor ()
{
	static bool init;
	if (!init)
	{
		init = true;

		ClassDefinitionFor<%-className%>Constructor = kJSClassDefinitionEmpty;
		ClassDefinitionFor<%-className%>Constructor.className = "<%-className%>Constructor";
		ClassDefinitionFor<%-className%>Constructor.callAsConstructor = MakeInstanceFor<%-className%>;
		ClassDefinitionFor<%-className%>Constructor.callAsFunction = MakeInstanceFromFunctionFor<%-className%>;
		ClassDefinitionFor<%-className%>Constructor.staticFunctions = StaticFunctionArrayFor<%-className%>Constructor;
<% if (extendsType) { %>
		ClassDefinitionFor<%-className%>Constructor.parentClass = CreateClassFor<%=extendsType.type%>Constructor();
<% } %>
		<%-className%>ClassDefForConstructor = JSClassCreate(&ClassDefinitionFor<%-className%>Constructor);

		JSClassRetain(<%-className%>ClassDefForConstructor);
	}
	return <%-className%>ClassDefForConstructor;
}

JSObjectRef MakeObjectFor<%-className%>Constructor (JSContextRef ctx, JSObjectRef functionBody)
{
	<%=className%>Private *_private = new <%-className%>Private();
	_private->context = (JSGlobalContextRef)ctx;
	_private->callback = functionBody;
	JSClassRef classRef = CreateClassFor<%-className%>Constructor();
	JSObjectRef object = JSObjectMake(ctx, classRef, (void*)_private);

	JSStringRef nameProperty = JSStringCreateWithUTF8CString("name");
	JSStringRef valueProperty = JSStringCreateWithUTF8CString("<%-className%>Constructor");
	JSValueRef valueRef = JSValueMakeString(ctx, valueProperty);
	JSObjectSetProperty(ctx, object, nameProperty, valueRef, kJSPropertyAttributeDontEnum, 0);
	JSStringRelease(nameProperty);
	JSStringRelease(valueProperty);

	JSObjectRef plainObject = JSObjectMake(ctx,0,0);
	JSStringRef prototypeProperty = JSStringCreateWithUTF8CString("prototype");
	JSObjectSetProperty(ctx, object, prototypeProperty, plainObject, kJSPropertyAttributeDontEnum, 0);
	JSStringRelease(prototypeProperty);

	JSStringRef cproperty = JSStringCreateWithUTF8CString("constructor");
	JSObjectSetProperty(ctx, plainObject, cproperty, object, kJSPropertyAttributeDontEnum, 0);
	JSStringRelease(cproperty);

	return object;
}

JSValueRef MakeObjectFor<%-className%>ConstructorCallback (JSContextRef ctx, JSObjectRef function, JSObjectRef object, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
{
	JSGlobalContextRef globalCtx = HyperloopGetGlobalContext(ctx);
	JSObjectRef functionBody = JSValueToObject(ctx,arguments[0],exception);
	JSObjectRef constructor = MakeObjectFor<%-className%>Constructor(globalCtx,functionBody);
	JSStringRef property = JSStringCreateWithUTF8CString("<%-className%>");
	JSObjectRef globalObject = JSContextGetGlobalObject(globalCtx);
	// place the new constructor into the global context
	JSObjectSetProperty(globalCtx,globalObject,property,constructor,kJSPropertyAttributeDontEnum|kJSPropertyAttributeReadOnly|kJSPropertyAttributeDontDelete,0);
	JSStringRelease(property);
	return JSValueMakeUndefined(ctx);
}

/**
 * return a wrapped JS object instance
 */
JSValueRef Hyperloop<%-className%>ToJSValueRef (JSContextRef ctx, <%-instanceName%>^ instance)
{
	return MakeObjectFor<%-className%>(ctx, instance);
}

/**
 * return an unwrapped JS object as a native instance
 */
<%-instanceName%>^ HyperloopJSValueRefTo<%-className%> (JSContextRef ctx, JSValueRef value, JSValueRef *exception, bool *cleanup)
{
	if (JSValueIsObject(ctx,value))
	{
		JSObjectRef object = JSValueToObject(ctx,value,exception);
		<%-instanceName%>^ <%=varname%> = (<%-instanceName%>^)HyperloopGetPrivateObjectAsID(object);
		return <%=varname%>;
	}
	else
	{
		return nullptr;
	}
}

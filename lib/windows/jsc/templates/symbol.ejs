<%- renderTemplate('templates/doc.ejs') %>
#include "<%- mangledName %>.h"

JSValueRef Hyperloop<%- mangledName %>(JSContextRef ctx, JSObjectRef function, JSObjectRef object, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
{
	if (argumentCount <%- variadic ? '<=' : '!='%> <%- args.length %>) {
		throw ref new Exception(0, "<%- name %> requires <%- (variadic ? 'more than ' : '') + args.length %> arguments!");
	}
	<%
	var params = [];
	args.forEach(function(arg, index) {
		var paramName = 'param$' + index;
		switch (arg.object.metatype) {
			case 'primitive':
				if (arg.type === 'const char *') { %>
	auto <%- paramName %> = hyperloop::getCStr(ctx, arguments[<%- index %>]);
	<% 			} else if (arg.type === 'char *') { %>
	// TODO: Well this feels like a hack...
	auto <%- paramName %> = (char *)HyperloopGetPrivateObjectAsJSBuffer(JSValueToObject(ctx, arguments[<%- index %>], exception))->buffer;
	<% 			} else if (arg.type.indexOf(' *') >= 0) { %>
	<%- arg.type.slice(0, -2) %> <%- paramName %>;
				<% arg.isOut = true; paramName = '&' + paramName;
				} else { %>
	auto <%- paramName %> = HyperloopJSValueRefTo<%- arg.object.realtype %>(ctx, arguments[<%- index %>], exception, 0);
	<% 			}
				break;
			default:
				throw arg.type + ' is not supported in @import signatures quite yet! Please: https://github.com/appcelerator/hyperloop/issues/new';			
		}
		params.push(paramName);
	});
	if (variadic) { %>
	// TODO: Figure out a better way to call variadics...
	<%- entry.returnType %> result;
	<%	for (var i = 1; i <= 10; i++) { %>
	<%- i === 1 ? '' : 'else ' %>if (argumentCount == <%- params.length + i %>) {
		result = <%- name %>(<%- params.concat(generateArgs(params.length, i)).join(', ') %>);
	}<%
		} %>
	else if (argumentCount > <%- params.length + i - 1 %>) {
		throw ref new Exception(0, "That many variadic arguments is not currently supported. Please: https://github.com/appcelerator/hyperloop/issues/new");
	}
	<% } else { %>
	auto result = <%- name %>(<%- params.join(', ') %>);
	<% }
	args.forEach(function(arg, index) {
		if (arg.isOut) { %>
	JSBuffer *params$<%- index %>$Buffer = (JSBuffer*)HyperloopGetPrivateObjectAsJSBuffer(JSValueToObject(ctx, arguments[<%- index %>], exception));
	int params$<%- index %>$Length = sizeof(<%- arg.type.slice(0, -2) %>);
	params$<%- index %>$Buffer->type = JSBufferTypePointer;
	if (params$<%- index %>$Buffer->length != params$<%- index %>$Length) {
		params$<%- index %>$Buffer->length = params$<%- index %>$Length;
		free(params$<%- index %>$Buffer->buffer);
		params$<%- index %>$Buffer->buffer = malloc(params$<%- index %>$Length);
	}
	((<%- arg.type %>)params$<%- index %>$Buffer->buffer)[0] = param$<%- index %>;
		<% }
	});
	%>
	return Hyperloop<%- returnType %>ToJSValueRef(ctx, result);
}
<%
 	function generateArgs(offset, length) {
 		var result = [];
		for (var j = 0; j < length; j++) {
			result.push('hyperloop::getCStr(ctx, arguments[' + (offset + j) + '])');
		}
		return result;
 	}
%>
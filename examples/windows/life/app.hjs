var CELL_SIZE = 10,
	FPS_INTERVAL = 30;

var window = Window.Current,
	White = new SolidColorBrush(Colors.White),
	Black = new SolidColorBrush(Colors.Black),
	universe = new Canvas(),
	label = new TextBlock();

// set up universe
universe.Height = window.Bounds.Height;
universe.Width = window.Bounds.Width;
universe.Background = Black;

// set up label
label.Text = 'Loading, please wait.';
label.TextAlignment = TextAlignment.Right;
label.VerticalAlignment = VerticalAlignment.Top;
label.HorizontalAlignment = HorizontalAlignment.Right;
label.FontSize = 60;
universe.Children.Append(label);

// set up the rest of the variables
var xSize = (universe.Width / CELL_SIZE) | 0,
	ySize = (universe.Height / CELL_SIZE) | 0;

// populate cells
console.log('populating cells...');
var cells = [];
for (var x = 0; x < xSize; x++) {
	cells[x] = [];
	for (var y = 0; y < ySize; y++) {
		// is this cell alive?
		var alive = Math.random() >= 0.5;

		// create native UI view
		var cellProxy = new Canvas();
		cellProxy.Height = CELL_SIZE;
		cellProxy.Width = CELL_SIZE;
		Canvas.SetLeft(cellProxy, x * CELL_SIZE);
		Canvas.SetTop(cellProxy, y * CELL_SIZE);
		cellProxy.Background = White;
		cellProxy.Visibility = alive ? Visibility.Visible : Visibility.Collapsed;

		// save the cell
		cells[x][y] = {
			proxy: cellProxy,
			lastAlive: alive,
			alive: alive
		};

		// add cell to universe
		universe.Children.Append(cellProxy);
	}
}
console.log('done populating cells.');

// start app
window.Content = universe;
window.Activate();

// the render function
var ctr = 0;
var EventHandler = @generic(EventHandler, 'Object^'),
	lastReport = Date.now();

@class('TickHandler', null, [], [
	{
		name: 'Tick',
		forHandler: EventHandler,
		returnType: 'void',
		arguments: [
			{ name: 'sender', type: 'Object^' },
			{ name: 'e', type: 'Object^' }
		],
		action: function update(params) {
			var x, y, cell;

			// render current generation
			for (x = 0; x < xSize; x++) {
				for (y = 0; y < ySize; y++) {
					cell = cells[x][y];

					// minimize number of times we need to modify the proxy object
					if (cell.alive !== cell.lastAlive) {
						cell.proxy.Visibility = cell.alive ? Visibility.Visible : Visibility.Collapsed;
						//cell.proxy.setHidden(!cell.alive);
					}

					// save the state
					cell.lastAlive = cell.alive;
				}
			}

			// build next generation
			for (x = 0; x < xSize; x++) {
				for (y = 0; y < ySize; y++) {
					cell = cells[x][y];
					cell.alive = getNextState(x, y, cell.lastAlive);
				}
			}

			// show the average FPS
			if (!(++ctr % FPS_INTERVAL)) {
				ctr = 1;
				var currentReport = Date.now(),
					fps = 1.0 / (currentReport - lastReport);
				label.Text = 'FPS: ' + Math.round(FPS_INTERVAL * 10 * fps) / 10;
				lastReport = currentReport;
			}
		}

	}
]);

var timer = new DispatcherTimer(),
	tickHandler = new TickHandler(),
	timeSpan = new TimeSpan(),
	handler = new EventHandler(tickHandler, 'Tick');

timeSpan.Duration = 10000000 / FPS_INTERVAL; // Unit is 100-nanoseconds.
timer.Interval = timeSpan;
timer.add_Tick(handler);
timer.Start();

// calculate the next state of each cell
function getNextState(x, y, alive) {
	var count = 0,
		xm1 = x > 0,
		xp1 = x+1 < xSize,
		ym1 = y > 0,
		yp1 = y+1 < ySize;

	if (xm1) {
		if (ym1 && cells[x-1][y-1].lastAlive) { count++; }
		if (cells[x-1][y].lastAlive) { count++; }
		if (yp1 && cells[x-1][y+1].lastAlive) { count++; }
	}
	if (xp1) {
		if (ym1 && cells[x+1][y-1].lastAlive) { count++; }
		if (cells[x+1][y].lastAlive) { count++; }
		if (yp1 && cells[x+1][y+1].lastAlive) { count++; }
	}
	if (ym1 && cells[x][y-1].lastAlive) { count++; }
	if (yp1 && cells[x][y+1].lastAlive) { count++; }

	return (alive && (count === 2 || count === 3)) || (!alive && count === 3);
}
